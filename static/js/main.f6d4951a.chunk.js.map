{"version":3,"sources":["api/api.ts","store/actions.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["API_URL","getTodos","a","fetch","response","json","getUserById","userId","SET_TODOS","SET_USER","REMOVE_USER","getTodosSelector","state","todos","getUserSelector","user","TodoList","dispatch","useDispatch","useState","query","setQuery","completedTodos","setCompletedTodos","filteredTitleTodos","useSelector","filter","todo","title","includes","useEffect","loadTodosFromServer","todosFromServer","type","payload","getUser","id","userFromServer","className","placeholder","value","onChange","event","target","allTodos","completed","filteredCompletedTodos","map","classNames","readOnly","onClick","CurrentUser","name","email","phone","App","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6d4951a.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import { Action, Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_USER = 'SET_USER';\nexport const REMOVE_USER = 'REMOVE_USER';\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User): Action => ({\n  type: SET_USER,\n  payload,\n});\n\nexport const removeSelectedUser = (): Action => ({\n  type: REMOVE_USER,\n});\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUserById } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\nimport { Todo } from '../../react-app-env';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [completedTodos, setCompletedTodos] = useState('all');\n\n  const todos = useSelector(getTodosSelector);\n\n  const filteredTitleTodos = todos.filter(todo => todo.title.includes(query));\n\n  const filteredCompletedTodos = (allTodos: Todo[]) => {\n    switch (completedTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserById(id);\n\n    dispatch(setUserAction(userFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter title\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n      <select\n        value={completedTodos}\n        onChange={(event) => setCompletedTodos(event.target.value)}\n      >\n        <option\n          value=\"all\"\n        >\n          all\n        </option>\n        <option\n          value=\"active\"\n        >\n          active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          completed\n        </option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredCompletedTodos(filteredTitleTodos).map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  getUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { removeSelectedUser } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\"\n        onClick={() => {\n          dispatch(removeSelectedUser());\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <div className=\"App__sidebar\">\n      <TodoList />\n    </div>\n    <div className=\"App__content\">\n      <div className=\"App__content-container\">\n        <CurrentUser />\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport { SET_TODOS, SET_USER, REMOVE_USER } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case REMOVE_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}