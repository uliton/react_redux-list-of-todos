{"version":3,"sources":["store/actions.ts","api/api.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionType","API_URL","getTodos","a","fetch","response","json","getUserById","userId","removeTodo","todoId","method","result","setTodosAction","payload","type","SET_TODOS","getTodosSelector","state","todos","getUserSelector","user","TodoList","setUserId","dispatch","useDispatch","useState","query","setQuery","completedTodos","setCompletedTodos","filteredTitleTodos","useSelector","filter","todo","title","includes","useEffect","loadTodosFromServer","todosFromServer","getUser","id","userFromServer","SET_USER","remover","newTodos","className","placeholder","value","onChange","event","target","allTodos","completed","filteredCompletedTodos","map","classNames","readOnly","button__focused","onClick","CurrentUser","name","email","phone","REMOVE_USER","App","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e39d5e93.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  REMOVE_USER = 'REMOVE_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface SetUsersAction {\n  type: ActionType.SET_USER,\n  payload: User,\n}\n\nexport interface RemoveUserAction {\n  type: ActionType.REMOVE_USER,\n}\n\nexport type Action = SetTodosAction | SetUsersAction | RemoveUserAction;\n\nexport const setTodosAction = (payload: Todo[]) => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User) => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const removeSelectedUser = () => ({\n  type: ActionType.REMOVE_USER,\n});\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const removeTodo = async (todoId: number) => {\n  const result = await fetch(`${API_URL}/todos/${todoId}`, { method: 'DELETE' });\n\n  return result;\n};\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUserById, removeTodo } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  userId: number,\n  setUserId: (id: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ userId, setUserId }) => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [completedTodos, setCompletedTodos] = useState('all');\n\n  const todos = useSelector(getTodosSelector);\n\n  const filteredTitleTodos = todos.filter(todo => todo.title.includes(query));\n\n  const filteredCompletedTodos = (allTodos: Todo[]) => {\n    switch (completedTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserById(id);\n\n    dispatch(setUserAction(userFromServer));\n  };\n\n  const remover = async (todoId: number) => {\n    await removeTodo(todoId);\n    const newTodos = await getTodos();\n\n    dispatch(setTodosAction(newTodos));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter title\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n      <select\n        value={completedTodos}\n        onChange={(event) => setCompletedTodos(event.target.value)}\n      >\n        <option\n          value=\"all\"\n        >\n          all\n        </option>\n        <option\n          value=\"active\"\n        >\n          active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          completed\n        </option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredCompletedTodos(filteredTitleTodos).map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <div className=\"button__container\">\n                <button\n                  className={classNames('button',\n                    {\n                      button__focused: todo.userId === userId,\n                    })}\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                    setUserId(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"\n                    button__delete\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => remover(todo.id)}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { removeSelectedUser } from '../../store/actions';\n\ntype Props = {\n  setUserId: (id: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ setUserId }) => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        className=\"\n          button\"\n        onClick={() => {\n          dispatch(removeSelectedUser());\n          setUserId(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          userId={userId}\n          setUserId={setUserId}\n        />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser\n            setUserId={setUserId}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { Action, ActionType } from './actions';\n\n// enum ActionType {\n//   SET_TODOS = 'SET_TODOS',\n//   SET_USER = 'SET_USER',\n//   REMOVE_USER = 'REMOVE_USER',\n// }\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.REMOVE_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}